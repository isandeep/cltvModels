x, t.x, T.cal)  # 27.30
pnbd.PAlive(params.nowd, x, t.x, T.cal) #  0.9991
pnbd.PlotFrequencyInCalibration(params.nowd, cal.cbs.nowd, 7)
cal.cbs.nowd[["x.star"]] = sapply(rownames(cal.cbs.nowd), function(x)
nrow(nowd.hold[cust == as.integer(x), ]))
T.star <- 39 # length of the holdout period
censor <- 7 # This censor serves the same purpose described above
x.star <- cal.cbs.nowd[,"x.star"]
comp <- pnbd.PlotFreqVsConditionalExpectedFrequency(params.nowd, T.star,
cal.cbs.nowd, x.star, censor)
T.cal <- cal.cbs.nowd[,"T.cal"]
T.tot <- 78
n.periods.final <- 78
inc.tracking <- pnbd.PlotTrackingInc(params.nowd, T.cal,
T.tot, w.track.data.nowd,
n.periods.final)
cum.tracking.data <- cumsum(w.track.data.nowd)
cum.tracking <- pnbd.PlotTrackingCum(params.nowd, T.cal,
T.tot, cum.tracking.data)
cum.tracking[,20:25]
pnbd.Expectation(params.nowd, t=52)  # 1.5788
head(cal.cbs.nowd)
head(cdnowSummary$cbs$cal)
head(cdnowSummary$cbs)
dim(cdnowSummary$cbs)
identical(cal.cbs.nowd, cdnowSummary$cbs)
dim(cal.cbs.nowd)
tail(cal.cbs.nowd)
tail(cdnowSummary$cbs)
summary(cdnowSummary$cbs)
summary(cal.cbs.nowd)
summary(x.vector)
summary(nowd.cal)
summary(tot.trans)
summary(ave.spend)
summary(m.x.value)
str(cdnowSummary)
nowd.cal = nowd.cal[period.int != 1, ]
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period.int)]
nowd.hold[, sales := mean(sales), by = list(cust, period.int)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
nowd.cal = nowd.cal[period.int != 1, ]
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
nowd.cal.spend = nowd.cal.spend[x.vector > 0,]
m.x.value = nowd.cal.spend[, m.x.value]
x.vector = nowd.cal.spend[, x.vector]
# estimate model parameters
spend.params = spend.EstimateParameters(m.x.value, x.vector)
spend.params
warnings()
summary(nowd.cal)
summary(m.x.value)
summary(ave.spend)
nowd.cal[m.x.value == 507.0,]
nowd.cal[m.x.value == 506.97,]
nowd[cust = 1458,]
nowd[cust == 1458,]
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
nowd[cust == 1458,]
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period.int)]
nowd.hold[, sales := mean(sales), by = list(cust, period.int)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
# consider only repeat transactions. remove txns in first period
nowd[, first_period.int := min(period.int), by = cust]
nowd.cal = nowd.cal[period.int != first_period.int, ]
# spend model only need no.of txns(x) and average txn value per period
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
# remove customers who have not made any repeat txns for estimation to
# avoid warnings
nowd.cal.spend = nowd.cal.spend[x.vector > 0,]
m.x.value = nowd.cal.spend[, m.x.value]
x.vector = nowd.cal.spend[, x.vector]
# estimate model parameters
spend.params = spend.EstimateParameters(m.x.value, x.vector)
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period.int)]
nowd.hold[, sales := mean(sales), by = list(cust, period.int)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
# consider only repeat transactions. remove txns in first period
nowd.cal[, first_period.int := min(period.int), by = cust]
nowd.cal = nowd.cal[period.int != first_period.int, ]
# spend model only need no.of txns(x) and average txn value per period
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
# remove customers who have not made any repeat txns for estimation to
# avoid warnings
nowd.cal.spend = nowd.cal.spend[x.vector > 0,]
m.x.value = nowd.cal.spend[, m.x.value]
x.vector = nowd.cal.spend[, x.vector]
# estimate model parameters
spend.params = spend.EstimateParameters(m.x.value, x.vector)
spend.params
spend.EstimateParameters(ave.spend, tot.trans)
summary(x.vector)
summary(tot.trans)
summary(m.x.trans)
summary(m.x.value)
summary(ave.spend)
lenght(m.x.value)
length(m.x.value)
length(ave.spend)
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period.int)]
nowd.hold[, sales := mean(sales), by = list(cust, period.int)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
# consider only repeat transactions. remove txns in first period
nowd.cal[, first_period.int := min(period.int), by = cust]
nowd.cal = nowd.cal[period.int != first_period.int, ]
nowd.cal
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
summary(nowd.cal.spend)
tot.trans <- cdnowSummary$cbs[,"x"]
length(tot.trans)
dim(nowd.cal.spend)
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
dim(nowd.cal.spend)
cdnowSummary$cbs
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period.int)]
nowd.hold[, sales := mean(sales), by = list(cust, period.int)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
nowd.cal
summary(nowd.cal)
sales = nowd.cal[, sales]
which(sales == max(ave.spend))
summary(ave.spend)
summary(m.x.value)
which(sales == 245.20)
which(sales == 245.2)
summary(sales)
library(ggplot2)
library(data.table)
library(BTYD)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date", "value_usd"), c("cust", "date", "sales"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date (take average txn value)
nowd[, sales := mean(sales, na.rm=TRUE), by = list(cust, date)]
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "period"))
# calculate integer period intervals
nowd[, period.int := as.integer(period) + 1]
# separate calibration and holdout periods
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# consider only one transaction per period
# take mean sales value
nowd.cal[, sales := mean(sales), by = list(cust, period)]
nowd.hold[, sales := mean(sales), by = list(cust, period)]
nowd.cal = unique(nowd.cal[, list(cust, sales, period, period.int)])
# consider only repeat transactions. remove txns in first period
nowd.cal[, first_period := min(period), by = cust]
nowd.cal = nowd.cal[period != first_period, ]
# spend model only need no.of txns(x) and average txn value per period
nowd.cal[, ':=' (m.x.value = mean(sales),
x.vector = .N), by = cust]
nowd.cal.spend = unique(nowd.cal[, list(cust, m.x.value, x.vector)])
# remove customers who have not made any repeat txns for estimation to
# avoid warnings
nowd.cal.spend = nowd.cal.spend[x.vector > 0,]
m.x.value = nowd.cal.spend[, m.x.value]
x.vector = nowd.cal.spend[, x.vector]
# estimate model parameters
spend.params = spend.EstimateParameters(m.x.value, x.vector)
spend.params
ave.spend <- cdnowSummary$m.x
tot.trans <- cdnowSummary$cbs[,"x"]
# There will be many warnings due to the zeroes that are
# included in the data above. To avoid them, use the following:
# (see example for spend.LL)
ave.spend <- ave.spend[which(tot.trans > 0)]
tot.trans <- tot.trans[which(tot.trans > 0)]
# We will let the spend function use default starting parameters
spend.EstimateParameters(ave.spend, tot.trans)
length(x.vector)
sum(x.vector != tot.trans)
sum(m.x.value != ave.spend)
summary(m.x.value)
summary(ave.spend)
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date"), c("cust", "date"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
rows
nowd
setkeyv(nowd, c("cust", "period"))
nowd
nowd1 = unique(nowd[, list(cust, period)])
nowd1
cdnow = read.table("../../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3)]
nowd = data.table(cdd)
# changing names
setnames(nowd, c("cidrestricted", "date"), c("cust", "date"))
nowd[, date := as.Date(as.character(date), format = "%Y%m%d")]
# keep only one transaction per date
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
# date - period lookup table
min_date = min(nowd$date)
max_date = max(nowd$date)
# create period lookup for each transaction date
dates = seq(min_date, max_date, by = "days")
period = as.numeric(dates - min_date)/7
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
# label transactions with corresponding periods in timeline
rows = nrow(nowd)
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) == rows # should be TRUE
setkeyv(nowd, c("cust", "date", "period"))
nowd = unique(nowd, by = c("cust", "period"))
# get first and last txn period and no. of transactions
nowd[, ':='(first_period = min(period)), by=cust]
nowd[, period.int := as.integer(period) + 1]
nowd[, first_period.int := min(period.int), by = cust]
nowd[, weekly.trans := .N, by = period.int]
# Looks like a hack to get repeat transactions
# May be a "Smart person's mirage!!"
# close match to weekly repeat txns from BTYD package
nowd[period.int == first_period.int, new.trans := .N, by = period.int]
nowd[, new.trans := ifelse(is.na(new.trans), 0, new.trans)]
nowd[, repeat.trans := weekly.trans - new.trans]
w.track.data.nowd = sapply(1:max(nowd[, period.int]),
function(x) min(nowd[period.int == x, repeat.trans]))
# separate calibration and holdout period
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd.cal = nowd[date <= end.cal.period, ]
# remove cutomers who didn't transact in calibration period
nowd.hold = nowd.hold[period > first_period, ]
# create t.x and T.cal variables
periods = as.numeric(max(nowd.cal$date) - min(nowd.cal$date))/7
nowd.cal[, ':=' (last_period = max(period),
x = .N-1), by = cust]
nowd.cal[, ':=' (t.x = last_period - first_period,
n.cal = periods - first_period)]
# Create RF matrix from the data
cal.cbs.nowd = unique(nowd.cal[,list(cust, x, t.x, n.cal)])
cal.cbs.nowd = as.data.frame(cal.cbs.nowd[, list(x, t.x, n.cal)])
names(cal.cbs.nowd) = c("x", "t.x", "T.cal")
params.nowd <- pnbd.EstimateParameters(cal.cbs.nowd)
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.cbs.nowd)
pnbd.Expectation(params.nowd, t=52)  # 1.5788
x <- cal.cbs.nowd[rownames(cal.cbs.nowd) == "1516", "x"]
t.x <- cal.cbs.nowd[rownames(cal.cbs.nowd) == "1516", "t.x"]
T.cal <- cal.cbs.nowd[rownames(cal.cbs.nowd) == "1516", "T.cal"]
pnbd.ConditionalExpectedTransactions(params.nowd, T.star = 52,
x, t.x, T.cal)  # 27.30
pnbd.PAlive(params.nowd, x, t.x, T.cal) #  0.9991
pnbd.PlotFrequencyInCalibration(params.nowd, cal.cbs.nowd, 7)
cal.cbs.nowd[["x.star"]] = sapply(rownames(cal.cbs.nowd), function(x)
nrow(nowd.hold[cust == as.integer(x), ]))
T.star <- 39 # length of the holdout period
censor <- 7 # This censor serves the same purpose described above
x.star <- cal.cbs.nowd[,"x.star"]
comp <- pnbd.PlotFreqVsConditionalExpectedFrequency(params.nowd, T.star,
cal.cbs.nowd, x.star, censor)
T.cal <- cal.cbs.nowd[,"T.cal"]
T.tot <- 78
n.periods.final <- 78
inc.tracking <- pnbd.PlotTrackingInc(params.nowd, T.cal,
T.tot, w.track.data.nowd,
n.periods.final)
inc.tracking[,20:25]
cum.tracking.data <- cumsum(w.track.data.nowd)
cum.tracking <- pnbd.PlotTrackingCum(params.nowd, T.cal,
T.tot, cum.tracking.data)
cum.tracking[,20:25]
