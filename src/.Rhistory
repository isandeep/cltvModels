"Predict_Trans", "Actual_Trans", "Total_Accounts", "custs")]
colSums(dfV1[, -1])
ggplot(dfV1L, aes(x = x_m_n, y = value, color = variable)) +
geom_line() + theme_bw()
colSums(dfV1[, -1])
sapply(params_bfgs_r, function(x) x$par)
sapply(params_bobyqa, function(x) x$par)
p6.randstart = bgbb.EstimateParameters(dfC6)
p6.randstart
p6.goodstart = bgbb.EstimateParameters(dfC6, par.start = c(2, 2, 5, 200))
p6.goodstart
colSums(dfV1[, -1])
bgbb.PlotFrequencyInCalibration
bgbb.PlotFrequencyInCalibration(params_bfgs_r[["1"]$par
bgbb.PlotFrequencyInCalibration(params_bfgs_r[["1"]]$par
dfC_cbs[dfC_cbs[["cohort"]] == 1, ])
bgbb.PlotFrequencyInCalibration(params_bfgs_r[["1"]]$par,
dfC_cbs[dfC_cbs[["cohort"]] == 1, ])
dfC_cbs[dfC_cbs[["cohort"]] == 1, ]
dfC_cbs[dfC_cbs[["cohort"]] == 1,c("x","t.x","n.cal") ]
bgbb.PlotFrequencyInCalibration(params_bfgs_r[["1"]]$par,
bgbb.PlotFrequencyInCalibration
dfC_cbs[dfC_cbs[["cohort"]] == 1,c("x","t.x","n.cal","custs") ]
head(dfV)
ggplot(dfV1L, aes(x = x_m_n, y = value, color = variable)) +
geom_line() + theme_bw()
colSums(dfV1[, -1])
write.csv(dfV1, "../data/resultsR.csv")
write.csv(dfV, "../data/resultsR.csv", row.names = FALSE)
ggplot(dfV1L, aes(x = x_m_n, y = value, color = variable)) +
geom_line() + theme_bw()
save(list = ls(), file="../data/modelCompare.RData")
?dc.ElogToCbsCbt
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
cdnow$date = as.Date(as.character(cdnow$date), format = "%Y%m%d")
# keep only one transaction per customer per day
# cdd = with(cdnow,
#            aggregate(cdnow[,c(4,5)], list(cid=cid, cidrestricted=cidrestricted,
#                                  date=date), sum))
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
names(cdd) = c("cust", "date", "sales")
cdd = dc.MergeTransactionsOnSameDate(cdd)
# divide dataset into calibration period and holdout period
end.cal.period = as.Date("1997-09-30")
cdd.cal = cdd[cdd$date <= end.cal.period,]
# model is concerned with only repeat customers. Remove first transactions in one
# dataset and keep information in another dataset
split.data <- dc.SplitUpElogForRepeatTrans(cdd.cal)
clean.cdd <- split.data$repeat.trans.elog
# create a customer-by-time matirx. each row represents a customer and column
# values indicate whether he has purchased on given day
freq.cbt <- dc.CreateFreqCBT(clean.cdd);
freq.cbt[1:3,1:5]
# retrive first transactions of repeat customers
tot.cbt <- dc.CreateFreqCBT(cdd)
cal.cbt <- dc.MergeCustomers(tot.cbt, freq.cbt)
# create customer-by-sufficient-statistic matrix, timeunit = "week"
birth.periods <- split.data$cust.data$birth.per
last.dates <- split.data$cust.data$last.date
cal.cbs.dates <- data.frame(birth.periods, last.dates,
end.cal.period)
cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.cbt, cal.cbs.dates,
per="week")
# estimation of params for pareto model
params <- pnbd.EstimateParameters(cal.cbs)
LL <- pnbd.cbs.LL(params, cal.cbs)
# checking convergence by providing final params as starting pt.
params <- pnbd.EstimateParameters(cal.cbs, params);
LL <- pnbd.cbs.LL(params, cal.cbs)
x <- cal.cbs["1516", "x"]
t.x <- cal.cbs["1516", "t.x"]
T.cal <- cal.cbs["1516", "T.cal"]
x
head(cal.cbs)
head(cdd)
cdd[cdd$cust == 1516,]
dim(cdd[cdd$cust == 1516,])
d1516 = cdd[cdd$cust == 1516,]
head(d1516)
d1516$week = week(d1516)
d1516$week = week(d1516$date)
head(d1516)
?week
summary(d1)
summary(d1516)
d1516$week = paste(year(d1516$date),week(d1516$date))
head(d1516)
d1516$week = paste(year(d1516$date),week(d1516$date), sep="")
head(d1516)
unique(d1516$week)
length(unique(d1516$week))
d1516.cal = d1516[d1516$date <= end.cal.period,]
length(unique(d1516.cal$week))
t.x
x
head(cal.cbs)
cal.unq = unique(cal.cbs)
params
pnbd.EstimateParameters(cal.unq)
params <- pnbd.EstimateParameters(cal.cbs)
params
colSums(dfV1[, -1])
bgbb.PlotFrequencyInCalibration(params_bfgs_r[["1"]]$par,
dfC_cbs[dfC_cbs[["cohort"]] == 1, ])
bgbb.PlotTrackingCum(params_bfgs_r[["1"]]$par, dfC_cbs[dfC_cbs[["cohort"]] == 1, ])
?bgbb.PlotTrackingCum
data(donationsSummary)
ls(donationsSummary)
donationsSummary$annual.trans
library(BTYD)
library(data.table)
library(dplyr)
set.seed(1729)
bp_txn = expand.grid(ID = as.character(110:178),
Txn_date = sample(15737:16467, 500))
bp_txn$Txn_date = as.Date(bp_txn$Txn_date, origin="1970-01-01")
bp_txn = data.table(bp_txn)
bp_txn = sample_n(bp_txn, 1000, replace=TRUE)
setnames(bp_txn, c("ID", "Txn_date"), c("cust", "date"))
bp_txn[, sales := 1]  # create dummy sales column
dataSumm = dc.ElogToCbsCbt(bp_txn, per="month")
ls(dataSumm)
dataSumm$cal
dataSumm$custdata
dataSumm$cust.data
dataSumm$cal$cbs
?dc.ElogToCbsCbt
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
cdnow$date = as.Date(as.character(cdnow$date), format = "%Y%m%d")
# keep only one transaction per customer per day
# cdd = with(cdnow,
#            aggregate(cdnow[,c(4,5)], list(cid=cid, cidrestricted=cidrestricted,
#                                  date=date), sum))
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
names(cdd) = c("cust", "date", "sales")
cdd = dc.MergeTransactionsOnSameDate(cdd)
head(cdd)
head(cdnow)
end.cal.period = as.Date("1997-09-30")
cdd.cal = cdd[cdd$date <= end.cal.period,]
# model is concerned with only repeat customers. Remove first transactions in one
# dataset and keep information in another dataset
split.data <- dc.SplitUpElogForRepeatTrans(cdd.cal)
clean.cdd <- split.data$repeat.trans.elog
# create a customer-by-time matirx. each row represents a customer and column
# values indicate whether he has purchased on given day
freq.cbt <- dc.CreateFreqCBT(clean.cdd);
freq.cbt[1:3,1:5]
# retrive first transactions of repeat customers
tot.cbt <- dc.CreateFreqCBT(cdd)
cal.cbt <- dc.MergeCustomers(tot.cbt, freq.cbt)
# create customer-by-sufficient-statistic matrix, timeunit = "week"
birth.periods <- split.data$cust.data$birth.per
last.dates <- split.data$cust.data$last.date
cal.cbs.dates <- data.frame(birth.periods, last.dates,
end.cal.period)
cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.cbt, cal.cbs.dates,
per="week")
head(cal.cbs)
dim(cdd)
summary(cdd)
head(birth.periods)
summary(birth.periods)
summary(cal.cbs)
head(cbt)
head(cal.cbt)
ls(dataSumm)
dataSumm$cal
dataSumm$cal$cbs
set.seed(1729)
bp_txn = expand.grid(ID = as.character(110:178),
Txn_date = sample(15737:16467, 500))
bp_txn$Txn_date = as.Date(bp_txn$Txn_date, origin="1970-01-01")
bp_txn = data.table(bp_txn)
setnames(bp_txn, c("ID", "Txn_date"), c("cust", "date"))
bp_txn[, sales := 1]  # create dummy sales column
# create cbt and cbs matrices
dataSumm = dc.ElogToCbsCbt(bp_txn, per="month")
cal = dataSumm$cal$cbs
head(cal)
bp_txn = sample_n(bp_txn, 10000, replace=TRUE)
dataSumm = dc.ElogToCbsCbt(bp_txn, per="month")
cal = dataSumm$cal$cbs
head(cal)
params <- pnbd.EstimateParameters(dataSumm$cal$cbs) # BFGS error
params <- pnbd.EstimateParameters(dataSumm$cal$cbs, max.param.value = 1e5) # BFGS error
params <- pnbd.EstimateParameters(dataSumm$cal$cbs, par.start = c(2, 3, 5, 10)
max.param.value = 1e5) # BFGS error
params <- pnbd.EstimateParameters(dataSumm$cal$cbs, par.start = c(2, 3, 5, 10),
max.param.value = 1e5) # BFGS error
source(file = "BGBB-LLComparisons-Functions.R", local = FALSE)
params <- bgbb.EstimateParameters.bobyqa(dataSumm$cal$cbs, par.start = c(2, 3, 5, 10),
max.param.value = 1e5) # BFGS error
library(nloptr)
params <- bgbb.EstimateParameters.bobyqa(dataSumm$cal$cbs, par.start = c(2, 3, 5, 10),
max.param.value = 1e5) # BFGS error
source(file = "pnbd_fix.R", local = FALSE)
params <- pnbd.EstimateParameters(dataSumm$cal$cbs, par.start = c(2, 3, 5, 10),
max.param.value = 1e5) # BFGS error
pnbd.EstimateParameters
params <- pnbd.EstimateParameters(dataSumm$cal$cbs) # BFGS error
params
pnbd.Expectation(params, t=52)  # 1.4734
pnbd.Expectation(params, t=1)  # 1.4734
pnbd.Expectation(params, t=2)  # 1.4734
pnbd.Expectation(params, t=12)  # Next year
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
head(cid)
head(cdnow)
cdd = cdnow[,c(2,3,5)]
head(cdd)
setnames(bp_txn, c("V2", "V3"), c("cust", "date"))
cdd = cdnow[,c(2,3)]
setnames(bp_txn, c("V2", "V3"), c("cust", "date"))
head(cdd)
names(cdd)
cdd = data.table(cdd)
setnames(bp_txn, c("V2", "V3"), c("cust", "date"))
head(cdd)
cdd
?setnames
setnames(bp_txn, c(V2, V3), c("cust", "date"))
setnames(cdd, c("V2", "V3"), c("cust", "date"))
cdd
class(cdd[, date])
cdd[, date := as.Date(as.character(date), format = "%Y%m%d")]
cdd
cdd = unique(cdd)
dim(cdd)
nowd = cdd
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
cdnow$date = as.Date(as.character(cdnow$date), format = "%Y%m%d")
# keep only one transaction per customer per day
# cdd = with(cdnow,
#            aggregate(cdnow[,c(4,5)], list(cid=cid, cidrestricted=cidrestricted,
#                                  date=date), sum))
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
names(cdd) = c("cust", "date", "sales")
cdd = dc.MergeTransactionsOnSameDate(cdd)
head(cdd)
dim(cdd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
nowd
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd = nowd[date <= end.cal.period, ]
end.cal.period = as.Date("1997-09-30")
cdd.cal = cdd[cdd$date <= end.cal.period,]
dim(cdd.cal)
dim(nowd)
?cut
x <- as.Date(1:1000,origin="2000-01-01")
x <- cut(x, breaks="quarter")
x
labs <- paste(substr(levels(x),1,4),"/",1:4, sep="")
x <- factor(x, labels=labs)
levels(x)
min_date = min(nowd$date)
max_date = max(nowd$date)
dates = seq(min_date, max_date, by="days")
head(dates)
period = as.integer(cut(dates, breaks = "weeks"))
head(period)
head(period,12)
head(period,14)
dates = seq(min_date, max_date, by="weeks")
head(dates)
?cut
period = as.integer(cut(dates, breaks = 7))
head(period,14)
head(period,15)
head(period,20)
head(dates, 20)
dates = seq(min_date, max_date, by="days")
head(dates, 20)
period = as.integer(cut(dates, breaks = 7))
head(period,20)
head(cut(dates, 5))
head(cut(dates, 1))
head(cut(dates, 2))
head(cut(dates, breaks=2))
periodLookup = function(min_date, max_date, period = "weeks"){
if(!(period %in% c("weeks", "months", "quarter"))) {
stop("period should be one of months, weeks, quarter") }
dates = seq(min_date, max_date, by="days")
period = as.integer(cut(dates, breaks = period))
#   month = format(dates, "%y%m")
return(unique(data.table(date=dates, period=period, key="date")))
}
lookupTable = periodLookup(min_date, max_date)
lookupTable
head(lookupTable,10)
day(min_date)
days(min_date)
weekday(min_date)
weekdays(min_date)
weekdays(min_date-2)
print(nrow(bp_txn))
bp_txn = merge(nowd, lookupTable, by="date", all.x=TRUE)
sum(is.na(bp_txn[["period"]]))  # should be zero
nrow(bp_txn) # should not change
print(nowd(bp_txn))
nowd = merge(nowd, lookupTable, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd)
NOWD
nowd
setkeyv(nowd, c("cust", "period"))
# get first and last txn period
nowd[, ':='(first_period = min(period),
last_period = max(period)), by=cust]
summary(nowd)
periods = max(nowd[,period])
nowd[, ':=' (t.x = last_period - first_period,
n.cal = periods - first_period,
cohort = first_period)]
nowd[, x := .N-1, by=ID]
nowd[, x := .N-1, by = cust]
nowd
summary(nowd)
dim(cal.cbs)
dim(nowd[cohort==1,])
dim(nowd)
head(cal.cbs)
summary(cal.cbs)
str(cal.cbs)
dim(unique(cal.cbs))
dim(cal.cbs)
head(cal.cbs)
nowd[,.N, by=cohort ]
dim(nowd)
dim(cal.cbs)
dim(unique(nowd))
head(nowd)
cal.nowd = nowd[,c(cust,x,t.x,n.cal)]
head(cal.nowd)
cal.nowd = nowd[,c("cust","x","t.x","n.cal")]
head(cal.nowd)
cal.nowd = nowd[,c("cust","x","t.x","n.cal"), with=FALSE]
head(cal.nowd)
cal.nowd = unique(nowd[,c("cust","x","t.x","n.cal"), with=FALSE])
head(cal.nowd)
summary(cal.nowd)
summary(cal.cbs)
class(cal.cbs)
identical(cal.nowd, as.data.frame(cal.cbs))
identical(cal.nowd, as.data.table(cal.cbs))
dim(cal.cbs)
dim(cal.nowd)
params.nowd <- pnbd.EstimateParameters(cal.nowd)
cal.nowd = as.data.frame(nowd[, list(x, t.x, n.cal)])
params.nowd <- pnbd.EstimateParameters(cal.nowd)
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.cbs)
params
params <- pnbd.EstimateParameters(cal.cbs)
LL <- pnbd.cbs.LL(params, cal.cbs)
params
LL
names(cal.nowd) = c("x", "t.x", "T.cal")
params.nowd <- pnbd.EstimateParameters(cal.nowd)
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.cbs)
LL.nowd
params.nowd
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.nowd)
LL.nowd
head(cal.cbs)
cal.cbs[,"t.x"] = as.integer(cal.cbs[, "t.x"])
cal.cbs[,"T.cal"] = as.integer(cal.cbs[, "T.cal"])
params <- pnbd.EstimateParameters(cal.cbs)
LL <- pnbd.cbs.LL(params, cal.cbs)
params
head(cal.nowd)
identical(cal.nowd, cal.cbs)
identical(cal.nowd, as.data.frame(cal.cbs))
head(cal.cbs)
cal.nowd
head(cal.nowd)
head(cal.cbs)
summary(cal.nowd)
summary(cal.cbs)
cal.nowd = unique(nowd[,list(cust, x, t.x, n.cal)])
cal.nowd
cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.cbt, cal.cbs.dates,
per="week")
head(cal.cbs)
cal.nowd = as.data.frame(nowd[, list(x, t.x, n.cal)])
head(cal.nowd)
cal.nowd = as.data.frame(cal.nowd[, list(x, t.x, n.cal)])
cal.nowd = unique(nowd[,list(cust, x, t.x, n.cal)])
cal.nowd = as.data.frame(cal.nowd[, list(x, t.x, n.cal)])
names(cal.nowd) = c("x", "t.x", "T.cal")
head(cal.nowd)
params.nowd <- pnbd.EstimateParameters(cal.nowd)
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.nowd)
params
params.nowd
LL
LL.nowd
(max_date - min_date)/7
as.numeric(max_date - min_date)/7)
as.numeric((max_date - min_date)/7)
dates = seq(min_date, max_date, by = "days")
period = (dates - min_date)/7
summary(period)
period = as.numeric((dates - min_date)/7)
summary(period)
summary(cal.cbs)
periods = as.numeric(max_date-min_date)/7
periods
head(period)
lookup_numeric = unique(data.table(date=dates, period=period, key="date"))
lookup_numeric
nowd = data.table(cdd)
nowd
nowd = unique(nowd)
keycols = c("cust", "date")
setkeyv(nowd, keycols)
end.cal.period = as.Date("1997-09-30")
nowd.hold = nowd[date > end.cal.period, ]
nowd = nowd[date <= end.cal.period, ]
min_date = min(nowd$date)
max_date = max(nowd$date)
print(nrow(nowd))
nowd = merge(nowd, lookup_numeric, by="date", all.x=TRUE)
sum(is.na(nowd[["period"]]))  # should be zero
nrow(nowd) # should not change
nowd[, ':='(first_period = min(period),
last_period = max(period),
x = .N-1), by=cust]
periods = as.numeric(max_date-min_date)/7
nowd[, ':=' (t.x = last_period,
n.cal = periods - first_period]
nowd[, ':=' (t.x = last_period,
n.cal = periods - first_period)]
summary(nowd)
summary(cal.cbs)
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
cdnow$date = as.Date(as.character(cdnow$date), format = "%Y%m%d")
# keep only one transaction per customer per day
# cdd = with(cdnow,
#            aggregate(cdnow[,c(4,5)], list(cid=cid, cidrestricted=cidrestricted,
#                                  date=date), sum))
# keep only one id col, date and value columns
cdd = cdnow[,c(2,3,5)]
names(cdd) = c("cust", "date", "sales")
cdd = dc.MergeTransactionsOnSameDate(cdd)
# divide dataset into calibration period and holdout period
end.cal.period = as.Date("1997-09-30")
cdd.cal = cdd[cdd$date <= end.cal.period,]
# model is concerned with only repeat customers. Remove first transactions in one
# dataset and keep information in another dataset
split.data <- dc.SplitUpElogForRepeatTrans(cdd.cal)
clean.cdd <- split.data$repeat.trans.elog
# create a customer-by-time matirx. each row represents a customer and column
# values indicate whether he has purchased on given day
freq.cbt <- dc.CreateFreqCBT(clean.cdd);
freq.cbt[1:3,1:5]
# retrive first transactions of repeat customers
tot.cbt <- dc.CreateFreqCBT(cdd)
cal.cbt <- dc.MergeCustomers(tot.cbt, freq.cbt)
# create customer-by-sufficient-statistic matrix, timeunit = "week"
birth.periods <- split.data$cust.data$birth.per
last.dates <- split.data$cust.data$last.date
cal.cbs.dates <- data.frame(birth.periods, last.dates,
end.cal.period)
cal.cbs <- dc.BuildCBSFromCBTAndDates(cal.cbt, cal.cbs.dates,
per="week")
summary(cal.cbs)
head(cal.cbs)
dim(nowd)
cal.nowd = unique(nowd[,list(cust, x, t.x, n.cal)])
head(cal.nowd)
summary(cal.cbs)
cal.nowd = as.data.frame(cal.nowd[, list(x, t.x, n.cal)])
names(cal.nowd) = c("x", "t.x", "T.cal")
params.nowd <- pnbd.EstimateParameters(cal.nowd)
LL.nowd <- pnbd.cbs.LL(params.nowd, cal.nowd)
params.nowd
params
head(cal.nowd)
head(cal.cbs)
identical(cal.nowd, as.data.frame(cal.cbs))
params <- pnbd.EstimateParameters(cal.cbs)
LL <- pnbd.cbs.LL(params, cal.cbs)
params
LL
params <- pnbd.EstimateParameters(cal.cbs, params);
LL <- pnbd.cbs.LL(params, cal.cbs)
params
LL
setdiff(cal.nowd, as.data.frame(cal.cbs))
tail(cal.nowd)
tail(cal.cbs)
nowd = data.table(cdd)
head(cdd)
cdnow = read.table("../data/CDNOW_sample/CDNOW_sample.txt")
names(cdnow) = c("cid", "cidrestricted", "date", "numitems", "value_usd")
cdnow$date = as.Date(as.character(cdnow$date), format = "%Y%m%d")
cdd = cdnow[,c(2,3)]
head(cdd)
nowd = data.table(cdd)
setnames(nowd, c("cidrestricted", "date"), c("cust", "date"))
nowd = unique(nowd)
keycols = c("cust", "date")
